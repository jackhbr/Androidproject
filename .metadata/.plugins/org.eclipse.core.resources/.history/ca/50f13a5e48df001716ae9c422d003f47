package scgo;

import robocode.AdvancedRobot;
import robocode.ScannedRobotEvent;

public class a1 extends AdvancedRobot{
	private double EnemyEnergy = 100;
	private int direction = 1;
	public void run()
	{
		setAdjustGunForRobotTurn(true);//炮筒脱离机器人而运动
		setAdjustRadarForGunTurn(true);
		while(true)
		{
			turnRadarLeftRadians(2);
		}
	}
	public void onScannedRobot(ScannedRobotEvent e) {
		
		
		double Bearing = getHeadingRadians() + e.getBearingRadians();
		setTurnRightRadians(xiangdui(e.getBearingRadians() + Math.PI / 2)
				- Math.PI / 4 * Math.random() * direction);
		setTurnGunRightRadians(xiangdui(Bearing
				- getGunHeadingRadians()+ Math.asin(e.getVelocity()* Math.sin(e.getHeadingRadians() - Bearing) / 17)));
		setFire(220 / Math.max(e.getDistance(), 90) + 0.9);

		setTurnRadarRightRadians(xiangdui(Bearing
				- getRadarHeadingRadians()) * 2);
		
		EnemyEnergy=e.getEnergy();//获取现在的能量值，形成类似迭代的东西
		if(EnemyEnergy!=e.getEnergy())//如果上一次敌人的能量值不等于现在的能量值，那么就移动躲掉别人的攻击
		{
			if(Math.random()<0.65)//更倾向于前进，这是由你一直开炮所决定的，不一直朝着对方去，那么那些炮弹容易浪费，造成损失
			{
				setAhead(30+Math.random()*e.getDistance());
			}else {
				setBack(20+Math.random()*e.getDistance());
			}
			
			
		}
		
		scan();//这个在最后面肯定是要有的，不然没法一直移动，这列采取主动触发scan的办法，因为
		//机器不能同时做那么多的事情，又不能用多线程，所以这就是多线程的一直方式，这是让scan永远处于较高的中断优先级
		//而且这个还能代替execute使set的方法执行
	}
	private double xiangdui(double r) {
		return Math.atan2(Math.sin(r), Math.cos(r));
	}

}
